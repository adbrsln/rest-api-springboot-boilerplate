# ===================================================================
#                                SERVER
# ===================================================================
# Server port
server.port=8080

# Context path for the application. All endpoints will be prefixed with this path.
# Example: http://localhost:8080/api/v1/users
server.servlet.context-path=/api/v1

# For production, it's safer to not include the full stack trace in error responses.
# Options: never, on_param (if `trace` param is present), always
server.error.include-stacktrace=never


# ===================================================================
#                        DATASOURCE (DATABASE)
# ===================================================================
# Choose ONE of the following database configurations.
# H2 is active by default, perfect for development and testing.

# -------------------- H2 (In-Memory Database) --------------------
# Enabled by default for easy development without external DB setup.
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enable H2 console so you can view the database in your browser at http://localhost:8080/h2-console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# -------------------- PostgreSQL (Production Example) --------------------
# Uncomment the following lines to use PostgreSQL. Remember to comment out the H2 section above.
# spring.datasource.url=jdbc:postgresql://localhost:5432/your_database_name
# spring.datasource.username=your_postgres_user
# spring.datasource.password=your_postgres_password
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# -------------------- MySQL (Production Example) --------------------
# Uncomment the following lines to use MySQL. Remember to comment out the H2 section above.
# spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name?useSSL=false&serverTimezone=UTC
# spring.datasource.username=your_mysql_user
# spring.datasource.password=your_mysql_password
# spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect


# ===================================================================
#                      JPA / HIBERNATE SETTINGS
# ===================================================================
# Hibernate DDL (Data Definition Language) strategy.
# - `validate`: Validates the schema, makes no changes to the database. (RECOMMENDED FOR PRODUCTION)
# - `update`: Updates the schema if it's out of sync. (Good for development)
# - `create-drop`: Creates the schema on startup and drops it on shutdown. (Good for testing)
# - `create`: Creates the schema, but doesn't drop it.
# - `none`: Disables DDL handling.
spring.jpa.hibernate.ddl-auto=update

# Show the SQL statements generated by Hibernate in the console. Very useful for debugging.
spring.jpa.show-sql=true

# Properties to format the SQL logs to be more readable.
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true


# ===================================================================
#                  LOGGING CONFIGURATION
# ===================================================================
# Set the root logging level.
logging.level.root=INFO

# Set a more detailed logging level for your application's packages.
logging.level.com.yourcompany.yourapp=DEBUG

# For even more detailed query debugging, show the values bound to JDBC parameters.
# Set org.hibernate.SQL to DEBUG and org.hibernate.type.descriptor.sql to TRACE
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE


# ===================================================================
#                 API DOCUMENTATION (SPRINGDOC / SWAGGER)
# ===================================================================
# Path for the OpenAPI 3.0 specification JSON file.
springdoc.api-docs.path=/api-docs

# Path for the Swagger UI interface. Access it at http://localhost:8080/swagger-ui.html
springdoc.swagger-ui.path=/swagger-ui.html

# Customize the Swagger UI page.
springdoc.swagger-ui.operations-sorter=alpha # Sorts endpoints alphabetically
springdoc.swagger-ui.tags-sorter=alpha       # Sorts tags (controllers) alphabetically
springdoc.swagger-ui.disable-swagger-default-url=true

# Add custom information to the API documentation page.
springdoc.api-docs.title=Robust API Service
springdoc.api-docs.description=API documentation for the sample robust service.
springdoc.api-docs.version=OPENAPI_3_0


# ===================================================================
#                 SPRING BOOT ACTUATOR (HEALTH & METRICS)
# ===================================================================
# Expose specific actuator endpoints over HTTP. 'health' is essential. 'info' is useful.
# 'prometheus' is for monitoring systems. '*' exposes all, but is not recommended.
management.endpoints.web.exposure.include=health,info,prometheus

# Configure when to show full health details (e.g., database status).
# Options: never, when_authorized, always
management.endpoint.health.show-details=when_authorized


# ===================================================================
#                 JSON SERIALIZATION (JACKSON)
# ===================================================================
# Make JSON output in logs and responses pretty-printed (indented). Good for development.
spring.jackson.serialization.indent-output=true

# Don't include properties with null values in the JSON output. Keeps responses clean.
spring.jackson.default-property-inclusion=non_null

# ===================================================================
#                          CACHE CONFIGURATION
# ===================================================================
# Tell Spring Boot to use Caffeine as the cache manager implementation.
spring.cache.type=caffeine

# Configure the Caffeine cache specification.
# This example sets:
# - an initial capacity of 100 entries.
# - a maximum size of 500 entries (the cache will evict older entries when it exceeds this).
# - an expiration time of 10 minutes after the last write to an entry.
spring.cache.caffeine.spec=initialCapacity=100,maximumSize=500,expireAfterWrite=10m